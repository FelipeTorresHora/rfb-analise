# pages/5_游늯_Relatorios.py
import streamlit as st
import pandas as pd
from io import BytesIO

st.set_page_config(layout="wide", page_title="Gera칞칚o de Relat칩rios")

st.title("游늯 Gera칞칚o e Download de Relat칩rios")
st.markdown("---")

if 'df_filtrado' not in st.session_state or st.session_state.df_filtrado.empty:
    st.warning("Nenhum dado encontrado para os filtros selecionados.")
    st.stop()

df_relatorio = st.session_state.df_filtrado

# --- Fun칞칚o para converter DataFrame para Excel em mem칩ria ---
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Relatorio')
    processed_data = output.getvalue()
    return processed_data

# --- Interface de Gera칞칚o ---
st.subheader("Relat칩rio Personalizado com Filtros Atuais")
st.markdown("Os seguintes filtros est칚o aplicados ao relat칩rio:")

with st.expander("Ver Filtros Ativos", expanded=False):
    st.write(f"**Munic칤pios:** {st.session_state.municipio_selecionado or 'Todos'}")
    st.write(f"**CNAEs:** {st.session_state.cnae_selecionado or 'Todos'}")
    st.write(f"**Situa칞칚o Cadastral:** {st.session_state.situacao_selecionada or 'Todas'}")
    start, end = st.session_state.periodo_selecionado
    st.write(f"**Per칤odo:** {start.strftime('%d/%m/%Y')} a {end.strftime('%d/%m/%Y')}")

st.metric("Total de Linhas no Relat칩rio", f"{len(df_relatorio):,}")

st.markdown("### Pr칠-visualiza칞칚o do Relat칩rio")
st.dataframe(df_relatorio.head(10))

# --- Bot칚o de Gera칞칚o e Download ---
st.markdown("---")
st.subheader("Download do Relat칩rio Completo")

# Gera o arquivo Excel em mem칩ria
excel_data = to_excel(df_relatorio)

# Cria o bot칚o de download
st.download_button(
    label="游닌 Baixar Relat칩rio em Excel",
    data=excel_data,
    file_name="relatorio_empresas_filtrado.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)